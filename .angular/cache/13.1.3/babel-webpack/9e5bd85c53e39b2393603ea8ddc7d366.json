{"ast":null,"code":"import { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, diff_match_patch } from 'diff-match-patch';\nimport { isEmpty } from './ngx-text-diff.utils';\nimport * as i0 from \"@angular/core\";\nexport let NgxTextDiffService = /*#__PURE__*/(() => {\n  class NgxTextDiffService {\n    constructor() {\n      this.initParser();\n    }\n\n    initParser() {\n      this.diffParser = new diff_match_patch();\n    }\n\n    getDiffsByLines(left, right) {\n      return new Promise((resolve, reject) => {\n        const a = this.diffParser.diff_linesToChars_(left, right);\n        const lineText1 = a.chars1;\n        const lineText2 = a.chars2;\n        const linesArray = a.lineArray;\n        const diffs = this.diffParser.diff_main(lineText1, lineText2, true);\n        this.diffParser.diff_charsToLines_(diffs, linesArray);\n        const rows = this.formatOutput(diffs);\n\n        if (!rows) {\n          reject('Error');\n        }\n\n        resolve(rows);\n      });\n    }\n\n    formatOutput(diffs) {\n      let lineLeft = 1;\n      let lineRight = 1;\n      return diffs.reduce((rows, diff) => {\n        if (!rows) {\n          rows = [];\n        }\n\n        const diffType = diff[0];\n        const diffValue = diff[1];\n        let leftDiffRow = null;\n        let rightDiffRow = null;\n        let leftContent = null;\n        let rightContent = null;\n        let rowTemp = null;\n\n        switch (diffType) {\n          case DIFF_EQUAL:\n            // 0\n            diffValue.split('\\n').filter((value, index, array) => {\n              if (index === array.length - 1) {\n                return !isEmpty(value);\n              }\n\n              return true;\n            }).forEach(line => {\n              leftContent = {\n                lineNumber: lineLeft,\n                lineContent: line,\n                lineDiffs: [],\n                prefix: ''\n              };\n              rightContent = {\n                lineNumber: lineRight,\n                lineContent: line,\n                lineDiffs: [],\n                prefix: ''\n              };\n              rowTemp = {\n                leftContent,\n                rightContent,\n                belongTo: 'both',\n                hasDiffs: false,\n                numDiffs: 0\n              };\n              rows.push(rowTemp);\n              lineRight = lineRight + 1;\n              lineLeft = lineLeft + 1;\n            });\n            break;\n\n          case DIFF_DELETE:\n            // -1\n            diffValue.split('\\n').filter((value, index, array) => {\n              if (index === array.length - 1) {\n                return !isEmpty(value);\n              }\n\n              return true;\n            }).forEach(line => {\n              rightDiffRow = rows.find(row => !row.leftContent && row.rightContent && row.rightContent.lineNumber === lineLeft && row.rightContent.prefix !== '');\n              leftContent = {\n                lineNumber: lineLeft,\n                lineContent: line,\n                lineDiffs: [{\n                  content: line,\n                  isDiff: true\n                }],\n                prefix: '-'\n              };\n\n              if (rightDiffRow) {\n                rightDiffRow.leftContent = leftContent;\n                rightDiffRow.leftContent.lineDiffs = this.getDiffParts(rightDiffRow.leftContent.lineContent, rightDiffRow.rightContent.lineContent);\n                rightDiffRow.rightContent.lineDiffs = this.getDiffParts(rightDiffRow.rightContent.lineContent, rightDiffRow.leftContent.lineContent);\n                rightDiffRow.belongTo = 'both';\n                rightDiffRow.numDiffs = this.countDiffs(rightDiffRow);\n              } else {\n                rows.push({\n                  leftContent,\n                  rightContent: null,\n                  hasDiffs: true,\n                  belongTo: 'left',\n                  numDiffs: 1\n                });\n              }\n\n              lineLeft = lineLeft + 1;\n            });\n            break;\n\n          case DIFF_INSERT:\n            // 1\n            diffValue.split('\\n').filter((value, index, array) => {\n              if (index === array.length - 1) {\n                return !isEmpty(value);\n              }\n\n              return true;\n            }).forEach(line => {\n              leftDiffRow = rows.find(row => row.leftContent && !row.rightContent && row.leftContent.lineNumber === lineRight && row.leftContent.prefix !== '');\n              rightContent = {\n                lineNumber: lineRight,\n                lineContent: line,\n                lineDiffs: [{\n                  content: line,\n                  isDiff: true\n                }],\n                prefix: '+'\n              };\n\n              if (leftDiffRow) {\n                leftDiffRow.rightContent = rightContent;\n                leftDiffRow.leftContent.lineDiffs = this.getDiffParts(leftDiffRow.leftContent.lineContent, leftDiffRow.rightContent.lineContent);\n                leftDiffRow.rightContent.lineDiffs = this.getDiffParts(leftDiffRow.rightContent.lineContent, leftDiffRow.leftContent.lineContent);\n                leftDiffRow.belongTo = 'both';\n                leftDiffRow.numDiffs = this.countDiffs(leftDiffRow);\n              } else {\n                rows.push({\n                  leftContent: null,\n                  rightContent,\n                  hasDiffs: true,\n                  belongTo: 'right',\n                  numDiffs: 1\n                });\n              }\n\n              lineRight = lineRight + 1;\n            });\n            break;\n        }\n\n        return rows;\n      }, []);\n    }\n\n    countDiffs(result) {\n      let diffCount = 0;\n\n      if (result.leftContent) {\n        diffCount += result.leftContent.lineDiffs.filter(diff => diff.isDiff).length;\n      }\n\n      if (result.leftContent) {\n        diffCount += result.rightContent.lineDiffs.filter(diff => diff.isDiff).length;\n      }\n\n      return diffCount;\n    }\n\n    getDiffParts(value, compareValue) {\n      const diffParts = [];\n      let i = 0;\n      let j = 0;\n      let shared = '';\n      let diff = '';\n\n      while (i < value.length) {\n        if (value[i] === compareValue[j] && j < compareValue.length) {\n          if (diff !== '') {\n            diffParts.push({\n              content: diff,\n              isDiff: true\n            });\n            diff = '';\n          }\n\n          shared += value[i];\n        } else {\n          if (shared !== '') {\n            diffParts.push({\n              content: shared,\n              isDiff: false\n            });\n            shared = '';\n          }\n\n          diff += value[i];\n        }\n\n        i++;\n        j++;\n      }\n\n      if (diff !== '') {\n        diffParts.push({\n          content: diff,\n          isDiff: true\n        });\n      } else if (shared !== '') {\n        diffParts.push({\n          content: shared,\n          isDiff: false\n        });\n      }\n\n      return diffParts;\n    }\n\n  }\n\n  NgxTextDiffService.ɵfac = function NgxTextDiffService_Factory(t) {\n    return new (t || NgxTextDiffService)();\n  };\n\n  NgxTextDiffService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NgxTextDiffService,\n    factory: NgxTextDiffService.ɵfac,\n    providedIn: 'root'\n  });\n  return NgxTextDiffService;\n})();","map":null,"metadata":{},"sourceType":"module"}